; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppVersion "3.3.1-beta1-msix"
#define MyAppName "UniGetUI"
#define MyAppPublisher "Martí Climent"
#define MyAppURL "https://github.com/marticliment/UniGetUI"
#define MyAppExeName "UniGetUI.exe"

#define public Dependency_Path_NetCoreCheck "InstallerExtras\"
#include "InstallerExtras\CodeDependencies.iss"


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
UninstallDisplayName="UniGetUI (PreRelease)"
AppId={{889610CC-4337-4BDB-AC3B-4F21806C0BDE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL="https://www.marticliment.com/unigetui/"
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
VersionInfoVersion=3.3.1.0
DefaultDirName="{autopf64}\UniGetUI"
DisableProgramGroupPage=yes
DisableDirPage=yes
DirExistsWarning=no
CloseApplications=no
; Remove the following line to run in administrative install mode (install for all users.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=UniGetUI.Installer
OutputDir=.     
; Comment line below to disable digital signature of installer
SignTool=azsign

SignedUninstaller=no
; SignedUninstallerDir=InstallerExtras\
MinVersion=10.0
SetupIconFile=src\UniGetUI\Assets\Images\icon.ico
UninstallDisplayIcon={app}\UniGetUI.exe
Compression=lzma2
SolidCompression=yes
WizardStyle=classic
WizardImageFile=InstallerExtras\INSTALLER.BMP
WizardSmallImageFile=src\UniGetUI\Assets\Images\icon.bmp
DisableWelcomePage=no
AllowUNCPath=no
UsePreviousTasks=yes
UsePreviousPrivileges=yes
UsePreviousAppDir=yes
ChangesEnvironment=yes
RestartIfNeededByRun=no
Uninstallable=no


[Languages]
Name: "English"; MessagesFile: "compiler:Default.isl"
Name: "Armenian"; MessagesFile: "compiler:Languages\Armenian.isl"
Name: "BrazilianPortuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "Catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "Corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "Czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "Danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "Dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "Finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "French"; MessagesFile: "compiler:Languages\French.isl"
Name: "German"; MessagesFile: "compiler:Languages\German.isl"
Name: "Hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
Name: "Icelandic"; MessagesFile: "compiler:Languages\Icelandic.isl"
Name: "Italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "Japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "Korean"; MessagesFile: "compiler:Languages\Korean.isl"
Name: "Norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "Polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "Portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "Russian"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "Slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "Spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "Turkish"; MessagesFile: "compiler:Languages\Turkish.isl"
Name: "Ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl" 

; Include installer's messages
#include "InstallerExtras\CustomMessages.iss"

[Code]
procedure InitializeWizard;
begin
  WizardForm.Bevel.Visible := False;
  WizardForm.Bevel1.Visible := True;
end;

procedure TaskKill(FileName: String);
var
  ResultCode: Integer;
begin
    Exec('taskkill.exe', '/f /im "' + FileName + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure TripleKill(FileName1: String; FileName2: String; FileName3: String);
var
  ResultCode: Integer;
begin
  TaskKill(FileName1);
  TaskKill(FileName2);
  TaskKill(FileName3);
end;

function CmdLineParamExists(const Value: string): Boolean;
var
  I: Integer;  
begin
  Result := False;
  for I := 1 to ParamCount do
    if CompareText(ParamStr(I), Value) = 0 then
    begin
      Result := True;
      Exit;
    end;
end;


function NextButtonClick(CurPageID: Integer): Boolean;
var  
  ResultCode: Integer;
begin
  Result := True;
  if (CurPageID = wpSelectTasks) and IsTaskSelected('portableinstall') then
  begin
    Result := False;
    if MsgBox('Portable installs cannot be created from the installer anymore. Would you like to open a step-by-step guide on how to set up UniGetUI portable?', mbConfirmation, MB_YESNO) = IDYES then
    begin
      ShellExec('open', 'https://www.marticliment.com/unigetui/help/unigetui-portable', '', '', SW_SHOWNORMAL, ewNoWait, ResultCode);
    end;
  end;
end;

function InitializeSetup: Boolean;
var
  ResultCode: Integer;
begin
  try    
    if not CmdLineParamExists('/NoVCRedist') then
    begin
      Dependency_AddVC2015To2022;
    end;
    if not CmdLineParamExists('/NoEdgeWebView') then
    begin
      Dependency_AddWebView2;
    end;
    Result := True;
  except
    Result := True;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var 
  ResultCode: Integer;
  ResultCode2: Integer;
  InstallerFile: String;
  Command: String;
  OutFile: String;
  OutFileContents: AnsiString;
begin
  if CurStep = ssInstall then
  begin
    WizardForm.StatusLabel.Caption := 'Closing UniGetUI...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    
    TaskKill('WingetUI.exe');
    TaskKill('UniGetUI.exe');
    TaskKill('choco.exe');
  
    Log('Begin MSIX deployment...');
    WizardForm.StatusLabel.Caption := 'Extracting MSIX package...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    
    ExtractTemporaryFile('UniGetUI.x64.Msix');
    InstallerFile := ExpandConstant('{tmp}\UniGetUI.x64.Msix');
    OutFile := ExpandConstant('{tmp}\deploy_output.txt');

    WizardForm.StatusLabel.Caption := 'Deploying MSIX package...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    
    Command := '-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "Add-AppxPackage -Path ''' + InstallerFile + '''"';
    Exec('powershell.exe', Command,'', SW_HIDE, ewWaitUntilTerminated, ResultCode);    

    if ResultCode = 0 then
    begin
      Log('Regular deployment succeeded!');
      Exit;
    end;
    
    WizardForm.StatusLabel.Caption := 'Previous deployment failed with code ' + IntToStr(ResultCode) + ', forcing deployment...';

    Command := '-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "Add-AppxPackage -Path ''' + InstallerFile + ''' -ForceUpdateFromAnyVersion"';
    Exec('powershell.exe', Command,'', SW_HIDE, ewWaitUntilTerminated, ResultCode); 
    
    if ResultCode = 0 then
    begin
      Log('Forced deployment succeeded!');
      Exit;
    end;

    Log('Forced deployment failed with code ' + IntToStr(ResultCode));
    // So, it seems like it is not possible to both redirect output to file as ansi AND get return code.
    // Here, we are re-running the command to get the error output.
    WizardForm.StatusLabel.Caption := 'Loading error result...';
    Command := '-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "& { Add-AppxPackage -Path ''' + InstallerFile + ''' -ForceUpdateFromAnyVersion } *>&1 | Out-File -FilePath ''' + OutFile + ''' -Encoding ascii;"';
    Exec('powershell.exe', Command,'', SW_HIDE, ewWaitUntilTerminated, ResultCode2); 

    if LoadStringFromFile(OutFile, OutFileContents) then
    begin
        MsgBox('MSIX package deployment failed (code ' + IntToStr(ResultCode) + ').' + #13#10#13#10 +  'Deployment output:' + #13#10 + OutFileContents, mbError, MB_OK);
    end
    else
    begin
        MsgBox('MSIX package deployment failed (code ' + IntToStr(ResultCode) + ').' + #13#10#13#10 + 'Deployment output could not be read.', mbError, MB_OK);
    end;
    RaiseException('The installation was aborted because the MSIX package failed to be deployed');
  end;
end;

[Tasks]
Name: "portableinstall"; Description: "{cm:PortInst}"; GroupDescription: "{cm:InstallType}"; Flags: unchecked exclusive
Name: "regularinstall"; Description: "{cm:RegInst}"; GroupDescription: "{cm:InstallType}"; Flags: exclusive
Name: "regularinstall\desktopicon"; Description: "{cm:RegDesktopIcon}"; GroupDescription: "{cm:ShCuts}";
Name: "regularinstall\chocoinstall"; Description: "{cm:ChocoInstall}"; GroupDescription: "{cm:ShCuts}";

[Files]
Source: "output\UniGetUI.x64.Msix"; DestDir: "{tmp}"; Flags: dontcopy;
Source: "src\UniGetUI.PackageEngine.Managers.Chocolatey\choco-cli\*"; DestDir: "{userpf}\..\UniGetUI\Chocolatey"; Flags: createallsubdirs ignoreversion recursesubdirs uninsneveruninstall; Tasks: regularinstall\chocoinstall; Check: not CmdLineParamExists('/NoChocolatey');

[Icons]
Name: "{autodesktop}\{#MyAppName}"; Filename: "unigetui://"; Tasks: regularinstall\desktopicon; Check: not CmdLineParamExists('/NoShortcut')

[Run]
; Uninstall previons UniGetUI
Filename: "powershell.exe"; Parameters: "-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command ""Get-ItemProperty 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*' | Where-Object {{ $_.DisplayName -like 'UniGetUI' } | ForEach-Object {{ Start-Process $_.UninstallString -ArgumentList '/SILENT' -Wait }"""; Flags: runhidden waituntilterminated; StatusMsg: "Deleting old UniGetUI versions... (1/3)"
Filename: "powershell.exe"; Parameters: "-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command ""Get-ItemProperty 'HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | Where-Object {{ $_.DisplayName -like 'UniGetUI' } | ForEach-Object {{ Start-Process $_.UninstallString -ArgumentList '/SILENT' -Wait }"""; Flags: runhidden waituntilterminated; StatusMsg: "Deleting old UniGetUI versions... (2/3)"
Filename: "powershell.exe"; Parameters: "-NoProfile -NonInteractive -ExecutionPolicy Bypass -Command ""Get-ItemProperty 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*' | Where-Object {{ $_.DisplayName -like 'UniGetUI' } | ForEach-Object {{ Start-Process $_.UninstallString -ArgumentList '/SILENT' -Wait }"""; Flags: runhidden waituntilterminated; StatusMsg: "Deleting old UniGetUI versions... (3/3)"

Filename: "unigetui.exe"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: runasoriginaluser nowait postinstall; Check: not CmdLineParamExists('/NoAutoStart');